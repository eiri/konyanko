// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eiri/konyanko/ent/episode"
	"github.com/eiri/konyanko/ent/item"
)

// ItemCreate is the builder for creating a Item entity.
type ItemCreate struct {
	config
	mutation *ItemMutation
	hooks    []Hook
}

// SetViewURL sets the "view_url" field.
func (ic *ItemCreate) SetViewURL(s string) *ItemCreate {
	ic.mutation.SetViewURL(s)
	return ic
}

// SetDownloadURL sets the "download_url" field.
func (ic *ItemCreate) SetDownloadURL(s string) *ItemCreate {
	ic.mutation.SetDownloadURL(s)
	return ic
}

// SetFileName sets the "file_name" field.
func (ic *ItemCreate) SetFileName(s string) *ItemCreate {
	ic.mutation.SetFileName(s)
	return ic
}

// SetFileSize sets the "file_size" field.
func (ic *ItemCreate) SetFileSize(i int) *ItemCreate {
	ic.mutation.SetFileSize(i)
	return ic
}

// SetPublishDate sets the "publish_date" field.
func (ic *ItemCreate) SetPublishDate(t time.Time) *ItemCreate {
	ic.mutation.SetPublishDate(t)
	return ic
}

// SetNillablePublishDate sets the "publish_date" field if the given value is not nil.
func (ic *ItemCreate) SetNillablePublishDate(t *time.Time) *ItemCreate {
	if t != nil {
		ic.SetPublishDate(*t)
	}
	return ic
}

// SetEpisodeID sets the "episode" edge to the Episode entity by ID.
func (ic *ItemCreate) SetEpisodeID(id int) *ItemCreate {
	ic.mutation.SetEpisodeID(id)
	return ic
}

// SetNillableEpisodeID sets the "episode" edge to the Episode entity by ID if the given value is not nil.
func (ic *ItemCreate) SetNillableEpisodeID(id *int) *ItemCreate {
	if id != nil {
		ic = ic.SetEpisodeID(*id)
	}
	return ic
}

// SetEpisode sets the "episode" edge to the Episode entity.
func (ic *ItemCreate) SetEpisode(e *Episode) *ItemCreate {
	return ic.SetEpisodeID(e.ID)
}

// Mutation returns the ItemMutation object of the builder.
func (ic *ItemCreate) Mutation() *ItemMutation {
	return ic.mutation
}

// Save creates the Item in the database.
func (ic *ItemCreate) Save(ctx context.Context) (*Item, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *ItemCreate) SaveX(ctx context.Context) *Item {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *ItemCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *ItemCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *ItemCreate) defaults() {
	if _, ok := ic.mutation.PublishDate(); !ok {
		v := item.DefaultPublishDate()
		ic.mutation.SetPublishDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *ItemCreate) check() error {
	if _, ok := ic.mutation.ViewURL(); !ok {
		return &ValidationError{Name: "view_url", err: errors.New(`ent: missing required field "Item.view_url"`)}
	}
	if _, ok := ic.mutation.DownloadURL(); !ok {
		return &ValidationError{Name: "download_url", err: errors.New(`ent: missing required field "Item.download_url"`)}
	}
	if _, ok := ic.mutation.FileName(); !ok {
		return &ValidationError{Name: "file_name", err: errors.New(`ent: missing required field "Item.file_name"`)}
	}
	if v, ok := ic.mutation.FileName(); ok {
		if err := item.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`ent: validator failed for field "Item.file_name": %w`, err)}
		}
	}
	if _, ok := ic.mutation.FileSize(); !ok {
		return &ValidationError{Name: "file_size", err: errors.New(`ent: missing required field "Item.file_size"`)}
	}
	if v, ok := ic.mutation.FileSize(); ok {
		if err := item.FileSizeValidator(v); err != nil {
			return &ValidationError{Name: "file_size", err: fmt.Errorf(`ent: validator failed for field "Item.file_size": %w`, err)}
		}
	}
	if _, ok := ic.mutation.PublishDate(); !ok {
		return &ValidationError{Name: "publish_date", err: errors.New(`ent: missing required field "Item.publish_date"`)}
	}
	return nil
}

func (ic *ItemCreate) sqlSave(ctx context.Context) (*Item, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *ItemCreate) createSpec() (*Item, *sqlgraph.CreateSpec) {
	var (
		_node = &Item{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(item.Table, sqlgraph.NewFieldSpec(item.FieldID, field.TypeInt))
	)
	if value, ok := ic.mutation.ViewURL(); ok {
		_spec.SetField(item.FieldViewURL, field.TypeString, value)
		_node.ViewURL = value
	}
	if value, ok := ic.mutation.DownloadURL(); ok {
		_spec.SetField(item.FieldDownloadURL, field.TypeString, value)
		_node.DownloadURL = value
	}
	if value, ok := ic.mutation.FileName(); ok {
		_spec.SetField(item.FieldFileName, field.TypeString, value)
		_node.FileName = value
	}
	if value, ok := ic.mutation.FileSize(); ok {
		_spec.SetField(item.FieldFileSize, field.TypeInt, value)
		_node.FileSize = value
	}
	if value, ok := ic.mutation.PublishDate(); ok {
		_spec.SetField(item.FieldPublishDate, field.TypeTime, value)
		_node.PublishDate = &value
	}
	if nodes := ic.mutation.EpisodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   item.EpisodeTable,
			Columns: []string{item.EpisodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ItemCreateBulk is the builder for creating many Item entities in bulk.
type ItemCreateBulk struct {
	config
	err      error
	builders []*ItemCreate
}

// Save creates the Item entities in the database.
func (icb *ItemCreateBulk) Save(ctx context.Context) ([]*Item, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Item, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *ItemCreateBulk) SaveX(ctx context.Context) []*Item {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *ItemCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *ItemCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
