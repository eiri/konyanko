// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *Anime) Episodes(ctx context.Context) (result []*Episode, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = a.NamedEpisodes(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = a.Edges.EpisodesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = a.QueryEpisodes().All(ctx)
	}
	return result, err
}

func (e *Episode) Item(ctx context.Context) (*Item, error) {
	result, err := e.Edges.ItemOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryItem().Only(ctx)
	}
	return result, err
}

func (e *Episode) Title(ctx context.Context) (*Anime, error) {
	result, err := e.Edges.TitleOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryTitle().Only(ctx)
	}
	return result, err
}

func (e *Episode) ReleaseGroup(ctx context.Context) (*ReleaseGroup, error) {
	result, err := e.Edges.ReleaseGroupOrErr()
	if IsNotLoaded(err) {
		result, err = e.QueryReleaseGroup().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (i *Item) Episode(ctx context.Context) (*Episode, error) {
	result, err := i.Edges.EpisodeOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryEpisode().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (rg *ReleaseGroup) Episodes(ctx context.Context) (result []*Episode, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = rg.NamedEpisodes(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = rg.Edges.EpisodesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = rg.QueryEpisodes().All(ctx)
	}
	return result, err
}
