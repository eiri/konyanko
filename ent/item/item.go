// Code generated by ent, DO NOT EDIT.

package item

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the item type in the database.
	Label = "item"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldViewURL holds the string denoting the view_url field in the database.
	FieldViewURL = "view_url"
	// FieldDownloadURL holds the string denoting the download_url field in the database.
	FieldDownloadURL = "download_url"
	// FieldFileName holds the string denoting the file_name field in the database.
	FieldFileName = "file_name"
	// FieldFileSize holds the string denoting the file_size field in the database.
	FieldFileSize = "file_size"
	// FieldPublishDate holds the string denoting the publish_date field in the database.
	FieldPublishDate = "publish_date"
	// EdgeEpisode holds the string denoting the episode edge name in mutations.
	EdgeEpisode = "episode"
	// Table holds the table name of the item in the database.
	Table = "items"
	// EpisodeTable is the table that holds the episode relation/edge.
	EpisodeTable = "episodes"
	// EpisodeInverseTable is the table name for the Episode entity.
	// It exists in this package in order to avoid circular dependency with the "episode" package.
	EpisodeInverseTable = "episodes"
	// EpisodeColumn is the table column denoting the episode relation/edge.
	EpisodeColumn = "item_id"
)

// Columns holds all SQL columns for item fields.
var Columns = []string{
	FieldID,
	FieldViewURL,
	FieldDownloadURL,
	FieldFileName,
	FieldFileSize,
	FieldPublishDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// FileNameValidator is a validator for the "file_name" field. It is called by the builders before save.
	FileNameValidator func(string) error
	// FileSizeValidator is a validator for the "file_size" field. It is called by the builders before save.
	FileSizeValidator func(int) error
	// DefaultPublishDate holds the default value on creation for the "publish_date" field.
	DefaultPublishDate func() time.Time
)

// OrderOption defines the ordering options for the Item queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByViewURL orders the results by the view_url field.
func ByViewURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldViewURL, opts...).ToFunc()
}

// ByDownloadURL orders the results by the download_url field.
func ByDownloadURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDownloadURL, opts...).ToFunc()
}

// ByFileName orders the results by the file_name field.
func ByFileName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileName, opts...).ToFunc()
}

// ByFileSize orders the results by the file_size field.
func ByFileSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileSize, opts...).ToFunc()
}

// ByPublishDate orders the results by the publish_date field.
func ByPublishDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishDate, opts...).ToFunc()
}

// ByEpisodeField orders the results by episode field.
func ByEpisodeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEpisodeStep(), sql.OrderByField(field, opts...))
	}
}
func newEpisodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EpisodeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, EpisodeTable, EpisodeColumn),
	)
}
