// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eiri/konyanko/ent/episode"
	"github.com/eiri/konyanko/ent/predicate"
	"github.com/eiri/konyanko/ent/releasegroup"
)

// ReleaseGroupUpdate is the builder for updating ReleaseGroup entities.
type ReleaseGroupUpdate struct {
	config
	hooks    []Hook
	mutation *ReleaseGroupMutation
}

// Where appends a list predicates to the ReleaseGroupUpdate builder.
func (rgu *ReleaseGroupUpdate) Where(ps ...predicate.ReleaseGroup) *ReleaseGroupUpdate {
	rgu.mutation.Where(ps...)
	return rgu
}

// SetName sets the "name" field.
func (rgu *ReleaseGroupUpdate) SetName(s string) *ReleaseGroupUpdate {
	rgu.mutation.SetName(s)
	return rgu
}

// AddEpisodeIDs adds the "episodes" edge to the Episode entity by IDs.
func (rgu *ReleaseGroupUpdate) AddEpisodeIDs(ids ...int) *ReleaseGroupUpdate {
	rgu.mutation.AddEpisodeIDs(ids...)
	return rgu
}

// AddEpisodes adds the "episodes" edges to the Episode entity.
func (rgu *ReleaseGroupUpdate) AddEpisodes(e ...*Episode) *ReleaseGroupUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return rgu.AddEpisodeIDs(ids...)
}

// Mutation returns the ReleaseGroupMutation object of the builder.
func (rgu *ReleaseGroupUpdate) Mutation() *ReleaseGroupMutation {
	return rgu.mutation
}

// ClearEpisodes clears all "episodes" edges to the Episode entity.
func (rgu *ReleaseGroupUpdate) ClearEpisodes() *ReleaseGroupUpdate {
	rgu.mutation.ClearEpisodes()
	return rgu
}

// RemoveEpisodeIDs removes the "episodes" edge to Episode entities by IDs.
func (rgu *ReleaseGroupUpdate) RemoveEpisodeIDs(ids ...int) *ReleaseGroupUpdate {
	rgu.mutation.RemoveEpisodeIDs(ids...)
	return rgu
}

// RemoveEpisodes removes "episodes" edges to Episode entities.
func (rgu *ReleaseGroupUpdate) RemoveEpisodes(e ...*Episode) *ReleaseGroupUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return rgu.RemoveEpisodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rgu *ReleaseGroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rgu.sqlSave, rgu.mutation, rgu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rgu *ReleaseGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := rgu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rgu *ReleaseGroupUpdate) Exec(ctx context.Context) error {
	_, err := rgu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rgu *ReleaseGroupUpdate) ExecX(ctx context.Context) {
	if err := rgu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rgu *ReleaseGroupUpdate) check() error {
	if v, ok := rgu.mutation.Name(); ok {
		if err := releasegroup.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ReleaseGroup.name": %w`, err)}
		}
	}
	return nil
}

func (rgu *ReleaseGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := rgu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(releasegroup.Table, releasegroup.Columns, sqlgraph.NewFieldSpec(releasegroup.FieldID, field.TypeInt))
	if ps := rgu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rgu.mutation.Name(); ok {
		_spec.SetField(releasegroup.FieldName, field.TypeString, value)
	}
	if rgu.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   releasegroup.EpisodesTable,
			Columns: []string{releasegroup.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rgu.mutation.RemovedEpisodesIDs(); len(nodes) > 0 && !rgu.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   releasegroup.EpisodesTable,
			Columns: []string{releasegroup.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rgu.mutation.EpisodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   releasegroup.EpisodesTable,
			Columns: []string{releasegroup.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rgu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{releasegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rgu.mutation.done = true
	return n, nil
}

// ReleaseGroupUpdateOne is the builder for updating a single ReleaseGroup entity.
type ReleaseGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReleaseGroupMutation
}

// SetName sets the "name" field.
func (rguo *ReleaseGroupUpdateOne) SetName(s string) *ReleaseGroupUpdateOne {
	rguo.mutation.SetName(s)
	return rguo
}

// AddEpisodeIDs adds the "episodes" edge to the Episode entity by IDs.
func (rguo *ReleaseGroupUpdateOne) AddEpisodeIDs(ids ...int) *ReleaseGroupUpdateOne {
	rguo.mutation.AddEpisodeIDs(ids...)
	return rguo
}

// AddEpisodes adds the "episodes" edges to the Episode entity.
func (rguo *ReleaseGroupUpdateOne) AddEpisodes(e ...*Episode) *ReleaseGroupUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return rguo.AddEpisodeIDs(ids...)
}

// Mutation returns the ReleaseGroupMutation object of the builder.
func (rguo *ReleaseGroupUpdateOne) Mutation() *ReleaseGroupMutation {
	return rguo.mutation
}

// ClearEpisodes clears all "episodes" edges to the Episode entity.
func (rguo *ReleaseGroupUpdateOne) ClearEpisodes() *ReleaseGroupUpdateOne {
	rguo.mutation.ClearEpisodes()
	return rguo
}

// RemoveEpisodeIDs removes the "episodes" edge to Episode entities by IDs.
func (rguo *ReleaseGroupUpdateOne) RemoveEpisodeIDs(ids ...int) *ReleaseGroupUpdateOne {
	rguo.mutation.RemoveEpisodeIDs(ids...)
	return rguo
}

// RemoveEpisodes removes "episodes" edges to Episode entities.
func (rguo *ReleaseGroupUpdateOne) RemoveEpisodes(e ...*Episode) *ReleaseGroupUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return rguo.RemoveEpisodeIDs(ids...)
}

// Where appends a list predicates to the ReleaseGroupUpdate builder.
func (rguo *ReleaseGroupUpdateOne) Where(ps ...predicate.ReleaseGroup) *ReleaseGroupUpdateOne {
	rguo.mutation.Where(ps...)
	return rguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rguo *ReleaseGroupUpdateOne) Select(field string, fields ...string) *ReleaseGroupUpdateOne {
	rguo.fields = append([]string{field}, fields...)
	return rguo
}

// Save executes the query and returns the updated ReleaseGroup entity.
func (rguo *ReleaseGroupUpdateOne) Save(ctx context.Context) (*ReleaseGroup, error) {
	return withHooks(ctx, rguo.sqlSave, rguo.mutation, rguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rguo *ReleaseGroupUpdateOne) SaveX(ctx context.Context) *ReleaseGroup {
	node, err := rguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rguo *ReleaseGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := rguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rguo *ReleaseGroupUpdateOne) ExecX(ctx context.Context) {
	if err := rguo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rguo *ReleaseGroupUpdateOne) check() error {
	if v, ok := rguo.mutation.Name(); ok {
		if err := releasegroup.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ReleaseGroup.name": %w`, err)}
		}
	}
	return nil
}

func (rguo *ReleaseGroupUpdateOne) sqlSave(ctx context.Context) (_node *ReleaseGroup, err error) {
	if err := rguo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(releasegroup.Table, releasegroup.Columns, sqlgraph.NewFieldSpec(releasegroup.FieldID, field.TypeInt))
	id, ok := rguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReleaseGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, releasegroup.FieldID)
		for _, f := range fields {
			if !releasegroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != releasegroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rguo.mutation.Name(); ok {
		_spec.SetField(releasegroup.FieldName, field.TypeString, value)
	}
	if rguo.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   releasegroup.EpisodesTable,
			Columns: []string{releasegroup.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rguo.mutation.RemovedEpisodesIDs(); len(nodes) > 0 && !rguo.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   releasegroup.EpisodesTable,
			Columns: []string{releasegroup.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rguo.mutation.EpisodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   releasegroup.EpisodesTable,
			Columns: []string{releasegroup.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReleaseGroup{config: rguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{releasegroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rguo.mutation.done = true
	return _node, nil
}
