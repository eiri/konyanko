// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eiri/konyanko/ent/anime"
	"github.com/eiri/konyanko/ent/episode"
	"github.com/eiri/konyanko/ent/predicate"
)

// AnimeUpdate is the builder for updating Anime entities.
type AnimeUpdate struct {
	config
	hooks    []Hook
	mutation *AnimeMutation
}

// Where appends a list predicates to the AnimeUpdate builder.
func (au *AnimeUpdate) Where(ps ...predicate.Anime) *AnimeUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetTitle sets the "title" field.
func (au *AnimeUpdate) SetTitle(s string) *AnimeUpdate {
	au.mutation.SetTitle(s)
	return au
}

// AddEpisodeIDs adds the "episodes" edge to the Episode entity by IDs.
func (au *AnimeUpdate) AddEpisodeIDs(ids ...int) *AnimeUpdate {
	au.mutation.AddEpisodeIDs(ids...)
	return au
}

// AddEpisodes adds the "episodes" edges to the Episode entity.
func (au *AnimeUpdate) AddEpisodes(e ...*Episode) *AnimeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEpisodeIDs(ids...)
}

// Mutation returns the AnimeMutation object of the builder.
func (au *AnimeUpdate) Mutation() *AnimeMutation {
	return au.mutation
}

// ClearEpisodes clears all "episodes" edges to the Episode entity.
func (au *AnimeUpdate) ClearEpisodes() *AnimeUpdate {
	au.mutation.ClearEpisodes()
	return au
}

// RemoveEpisodeIDs removes the "episodes" edge to Episode entities by IDs.
func (au *AnimeUpdate) RemoveEpisodeIDs(ids ...int) *AnimeUpdate {
	au.mutation.RemoveEpisodeIDs(ids...)
	return au
}

// RemoveEpisodes removes "episodes" edges to Episode entities.
func (au *AnimeUpdate) RemoveEpisodes(e ...*Episode) *AnimeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEpisodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AnimeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AnimeUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AnimeUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AnimeUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AnimeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(anime.Table, anime.Columns, sqlgraph.NewFieldSpec(anime.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.SetField(anime.FieldTitle, field.TypeString, value)
	}
	if au.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   anime.EpisodesTable,
			Columns: []string{anime.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEpisodesIDs(); len(nodes) > 0 && !au.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   anime.EpisodesTable,
			Columns: []string{anime.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EpisodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   anime.EpisodesTable,
			Columns: []string{anime.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{anime.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AnimeUpdateOne is the builder for updating a single Anime entity.
type AnimeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AnimeMutation
}

// SetTitle sets the "title" field.
func (auo *AnimeUpdateOne) SetTitle(s string) *AnimeUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// AddEpisodeIDs adds the "episodes" edge to the Episode entity by IDs.
func (auo *AnimeUpdateOne) AddEpisodeIDs(ids ...int) *AnimeUpdateOne {
	auo.mutation.AddEpisodeIDs(ids...)
	return auo
}

// AddEpisodes adds the "episodes" edges to the Episode entity.
func (auo *AnimeUpdateOne) AddEpisodes(e ...*Episode) *AnimeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEpisodeIDs(ids...)
}

// Mutation returns the AnimeMutation object of the builder.
func (auo *AnimeUpdateOne) Mutation() *AnimeMutation {
	return auo.mutation
}

// ClearEpisodes clears all "episodes" edges to the Episode entity.
func (auo *AnimeUpdateOne) ClearEpisodes() *AnimeUpdateOne {
	auo.mutation.ClearEpisodes()
	return auo
}

// RemoveEpisodeIDs removes the "episodes" edge to Episode entities by IDs.
func (auo *AnimeUpdateOne) RemoveEpisodeIDs(ids ...int) *AnimeUpdateOne {
	auo.mutation.RemoveEpisodeIDs(ids...)
	return auo
}

// RemoveEpisodes removes "episodes" edges to Episode entities.
func (auo *AnimeUpdateOne) RemoveEpisodes(e ...*Episode) *AnimeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEpisodeIDs(ids...)
}

// Where appends a list predicates to the AnimeUpdate builder.
func (auo *AnimeUpdateOne) Where(ps ...predicate.Anime) *AnimeUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AnimeUpdateOne) Select(field string, fields ...string) *AnimeUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Anime entity.
func (auo *AnimeUpdateOne) Save(ctx context.Context) (*Anime, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AnimeUpdateOne) SaveX(ctx context.Context) *Anime {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AnimeUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AnimeUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AnimeUpdateOne) sqlSave(ctx context.Context) (_node *Anime, err error) {
	_spec := sqlgraph.NewUpdateSpec(anime.Table, anime.Columns, sqlgraph.NewFieldSpec(anime.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Anime.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, anime.FieldID)
		for _, f := range fields {
			if !anime.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != anime.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.SetField(anime.FieldTitle, field.TypeString, value)
	}
	if auo.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   anime.EpisodesTable,
			Columns: []string{anime.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEpisodesIDs(); len(nodes) > 0 && !auo.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   anime.EpisodesTable,
			Columns: []string{anime.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EpisodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   anime.EpisodesTable,
			Columns: []string{anime.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(episode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Anime{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{anime.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
