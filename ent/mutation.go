// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/eiri/konyanko/ent/anime"
	"github.com/eiri/konyanko/ent/episode"
	"github.com/eiri/konyanko/ent/irregular"
	"github.com/eiri/konyanko/ent/predicate"
	"github.com/eiri/konyanko/ent/releasegroup"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAnime        = "Anime"
	TypeEpisode      = "Episode"
	TypeIrregular    = "Irregular"
	TypeReleaseGroup = "ReleaseGroup"
)

// AnimeMutation represents an operation that mutates the Anime nodes in the graph.
type AnimeMutation struct {
	config
	op              Op
	typ             string
	id              *int
	title           *string
	clearedFields   map[string]struct{}
	episodes        map[int]struct{}
	removedepisodes map[int]struct{}
	clearedepisodes bool
	done            bool
	oldValue        func(context.Context) (*Anime, error)
	predicates      []predicate.Anime
}

var _ ent.Mutation = (*AnimeMutation)(nil)

// animeOption allows management of the mutation configuration using functional options.
type animeOption func(*AnimeMutation)

// newAnimeMutation creates new mutation for the Anime entity.
func newAnimeMutation(c config, op Op, opts ...animeOption) *AnimeMutation {
	m := &AnimeMutation{
		config:        c,
		op:            op,
		typ:           TypeAnime,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAnimeID sets the ID field of the mutation.
func withAnimeID(id int) animeOption {
	return func(m *AnimeMutation) {
		var (
			err   error
			once  sync.Once
			value *Anime
		)
		m.oldValue = func(ctx context.Context) (*Anime, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Anime.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAnime sets the old Anime of the mutation.
func withAnime(node *Anime) animeOption {
	return func(m *AnimeMutation) {
		m.oldValue = func(context.Context) (*Anime, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AnimeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AnimeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AnimeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AnimeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Anime.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *AnimeMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *AnimeMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Anime entity.
// If the Anime object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnimeMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *AnimeMutation) ResetTitle() {
	m.title = nil
}

// AddEpisodeIDs adds the "episodes" edge to the Episode entity by ids.
func (m *AnimeMutation) AddEpisodeIDs(ids ...int) {
	if m.episodes == nil {
		m.episodes = make(map[int]struct{})
	}
	for i := range ids {
		m.episodes[ids[i]] = struct{}{}
	}
}

// ClearEpisodes clears the "episodes" edge to the Episode entity.
func (m *AnimeMutation) ClearEpisodes() {
	m.clearedepisodes = true
}

// EpisodesCleared reports if the "episodes" edge to the Episode entity was cleared.
func (m *AnimeMutation) EpisodesCleared() bool {
	return m.clearedepisodes
}

// RemoveEpisodeIDs removes the "episodes" edge to the Episode entity by IDs.
func (m *AnimeMutation) RemoveEpisodeIDs(ids ...int) {
	if m.removedepisodes == nil {
		m.removedepisodes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.episodes, ids[i])
		m.removedepisodes[ids[i]] = struct{}{}
	}
}

// RemovedEpisodes returns the removed IDs of the "episodes" edge to the Episode entity.
func (m *AnimeMutation) RemovedEpisodesIDs() (ids []int) {
	for id := range m.removedepisodes {
		ids = append(ids, id)
	}
	return
}

// EpisodesIDs returns the "episodes" edge IDs in the mutation.
func (m *AnimeMutation) EpisodesIDs() (ids []int) {
	for id := range m.episodes {
		ids = append(ids, id)
	}
	return
}

// ResetEpisodes resets all changes to the "episodes" edge.
func (m *AnimeMutation) ResetEpisodes() {
	m.episodes = nil
	m.clearedepisodes = false
	m.removedepisodes = nil
}

// Where appends a list predicates to the AnimeMutation builder.
func (m *AnimeMutation) Where(ps ...predicate.Anime) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AnimeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AnimeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Anime, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AnimeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AnimeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Anime).
func (m *AnimeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AnimeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.title != nil {
		fields = append(fields, anime.FieldTitle)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AnimeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case anime.FieldTitle:
		return m.Title()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AnimeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case anime.FieldTitle:
		return m.OldTitle(ctx)
	}
	return nil, fmt.Errorf("unknown Anime field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnimeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case anime.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	}
	return fmt.Errorf("unknown Anime field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AnimeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AnimeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnimeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Anime numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AnimeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AnimeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AnimeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Anime nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AnimeMutation) ResetField(name string) error {
	switch name {
	case anime.FieldTitle:
		m.ResetTitle()
		return nil
	}
	return fmt.Errorf("unknown Anime field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AnimeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.episodes != nil {
		edges = append(edges, anime.EdgeEpisodes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AnimeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case anime.EdgeEpisodes:
		ids := make([]ent.Value, 0, len(m.episodes))
		for id := range m.episodes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AnimeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedepisodes != nil {
		edges = append(edges, anime.EdgeEpisodes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AnimeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case anime.EdgeEpisodes:
		ids := make([]ent.Value, 0, len(m.removedepisodes))
		for id := range m.removedepisodes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AnimeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedepisodes {
		edges = append(edges, anime.EdgeEpisodes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AnimeMutation) EdgeCleared(name string) bool {
	switch name {
	case anime.EdgeEpisodes:
		return m.clearedepisodes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AnimeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Anime unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AnimeMutation) ResetEdge(name string) error {
	switch name {
	case anime.EdgeEpisodes:
		m.ResetEpisodes()
		return nil
	}
	return fmt.Errorf("unknown Anime edge %s", name)
}

// EpisodeMutation represents an operation that mutates the Episode nodes in the graph.
type EpisodeMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	view_url             *string
	download_url         *string
	file_name            *string
	file_size            *int
	addfile_size         *int
	publish_date         *time.Time
	episode_number       *int
	addepisode_number    *int
	anime_season         *int
	addanime_season      *int
	resolution           *string
	video_codec          *string
	audio_codec          *string
	clearedFields        map[string]struct{}
	title                *int
	clearedtitle         bool
	release_group        *int
	clearedrelease_group bool
	done                 bool
	oldValue             func(context.Context) (*Episode, error)
	predicates           []predicate.Episode
}

var _ ent.Mutation = (*EpisodeMutation)(nil)

// episodeOption allows management of the mutation configuration using functional options.
type episodeOption func(*EpisodeMutation)

// newEpisodeMutation creates new mutation for the Episode entity.
func newEpisodeMutation(c config, op Op, opts ...episodeOption) *EpisodeMutation {
	m := &EpisodeMutation{
		config:        c,
		op:            op,
		typ:           TypeEpisode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEpisodeID sets the ID field of the mutation.
func withEpisodeID(id int) episodeOption {
	return func(m *EpisodeMutation) {
		var (
			err   error
			once  sync.Once
			value *Episode
		)
		m.oldValue = func(ctx context.Context) (*Episode, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Episode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEpisode sets the old Episode of the mutation.
func withEpisode(node *Episode) episodeOption {
	return func(m *EpisodeMutation) {
		m.oldValue = func(context.Context) (*Episode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EpisodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EpisodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EpisodeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EpisodeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Episode.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetViewURL sets the "view_url" field.
func (m *EpisodeMutation) SetViewURL(s string) {
	m.view_url = &s
}

// ViewURL returns the value of the "view_url" field in the mutation.
func (m *EpisodeMutation) ViewURL() (r string, exists bool) {
	v := m.view_url
	if v == nil {
		return
	}
	return *v, true
}

// OldViewURL returns the old "view_url" field's value of the Episode entity.
// If the Episode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EpisodeMutation) OldViewURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldViewURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldViewURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldViewURL: %w", err)
	}
	return oldValue.ViewURL, nil
}

// ResetViewURL resets all changes to the "view_url" field.
func (m *EpisodeMutation) ResetViewURL() {
	m.view_url = nil
}

// SetDownloadURL sets the "download_url" field.
func (m *EpisodeMutation) SetDownloadURL(s string) {
	m.download_url = &s
}

// DownloadURL returns the value of the "download_url" field in the mutation.
func (m *EpisodeMutation) DownloadURL() (r string, exists bool) {
	v := m.download_url
	if v == nil {
		return
	}
	return *v, true
}

// OldDownloadURL returns the old "download_url" field's value of the Episode entity.
// If the Episode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EpisodeMutation) OldDownloadURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDownloadURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDownloadURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDownloadURL: %w", err)
	}
	return oldValue.DownloadURL, nil
}

// ResetDownloadURL resets all changes to the "download_url" field.
func (m *EpisodeMutation) ResetDownloadURL() {
	m.download_url = nil
}

// SetFileName sets the "file_name" field.
func (m *EpisodeMutation) SetFileName(s string) {
	m.file_name = &s
}

// FileName returns the value of the "file_name" field in the mutation.
func (m *EpisodeMutation) FileName() (r string, exists bool) {
	v := m.file_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFileName returns the old "file_name" field's value of the Episode entity.
// If the Episode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EpisodeMutation) OldFileName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileName: %w", err)
	}
	return oldValue.FileName, nil
}

// ResetFileName resets all changes to the "file_name" field.
func (m *EpisodeMutation) ResetFileName() {
	m.file_name = nil
}

// SetFileSize sets the "file_size" field.
func (m *EpisodeMutation) SetFileSize(i int) {
	m.file_size = &i
	m.addfile_size = nil
}

// FileSize returns the value of the "file_size" field in the mutation.
func (m *EpisodeMutation) FileSize() (r int, exists bool) {
	v := m.file_size
	if v == nil {
		return
	}
	return *v, true
}

// OldFileSize returns the old "file_size" field's value of the Episode entity.
// If the Episode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EpisodeMutation) OldFileSize(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileSize: %w", err)
	}
	return oldValue.FileSize, nil
}

// AddFileSize adds i to the "file_size" field.
func (m *EpisodeMutation) AddFileSize(i int) {
	if m.addfile_size != nil {
		*m.addfile_size += i
	} else {
		m.addfile_size = &i
	}
}

// AddedFileSize returns the value that was added to the "file_size" field in this mutation.
func (m *EpisodeMutation) AddedFileSize() (r int, exists bool) {
	v := m.addfile_size
	if v == nil {
		return
	}
	return *v, true
}

// ResetFileSize resets all changes to the "file_size" field.
func (m *EpisodeMutation) ResetFileSize() {
	m.file_size = nil
	m.addfile_size = nil
}

// SetPublishDate sets the "publish_date" field.
func (m *EpisodeMutation) SetPublishDate(t time.Time) {
	m.publish_date = &t
}

// PublishDate returns the value of the "publish_date" field in the mutation.
func (m *EpisodeMutation) PublishDate() (r time.Time, exists bool) {
	v := m.publish_date
	if v == nil {
		return
	}
	return *v, true
}

// OldPublishDate returns the old "publish_date" field's value of the Episode entity.
// If the Episode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EpisodeMutation) OldPublishDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublishDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublishDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublishDate: %w", err)
	}
	return oldValue.PublishDate, nil
}

// ResetPublishDate resets all changes to the "publish_date" field.
func (m *EpisodeMutation) ResetPublishDate() {
	m.publish_date = nil
}

// SetEpisodeNumber sets the "episode_number" field.
func (m *EpisodeMutation) SetEpisodeNumber(i int) {
	m.episode_number = &i
	m.addepisode_number = nil
}

// EpisodeNumber returns the value of the "episode_number" field in the mutation.
func (m *EpisodeMutation) EpisodeNumber() (r int, exists bool) {
	v := m.episode_number
	if v == nil {
		return
	}
	return *v, true
}

// OldEpisodeNumber returns the old "episode_number" field's value of the Episode entity.
// If the Episode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EpisodeMutation) OldEpisodeNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEpisodeNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEpisodeNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEpisodeNumber: %w", err)
	}
	return oldValue.EpisodeNumber, nil
}

// AddEpisodeNumber adds i to the "episode_number" field.
func (m *EpisodeMutation) AddEpisodeNumber(i int) {
	if m.addepisode_number != nil {
		*m.addepisode_number += i
	} else {
		m.addepisode_number = &i
	}
}

// AddedEpisodeNumber returns the value that was added to the "episode_number" field in this mutation.
func (m *EpisodeMutation) AddedEpisodeNumber() (r int, exists bool) {
	v := m.addepisode_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetEpisodeNumber resets all changes to the "episode_number" field.
func (m *EpisodeMutation) ResetEpisodeNumber() {
	m.episode_number = nil
	m.addepisode_number = nil
}

// SetAnimeSeason sets the "anime_season" field.
func (m *EpisodeMutation) SetAnimeSeason(i int) {
	m.anime_season = &i
	m.addanime_season = nil
}

// AnimeSeason returns the value of the "anime_season" field in the mutation.
func (m *EpisodeMutation) AnimeSeason() (r int, exists bool) {
	v := m.anime_season
	if v == nil {
		return
	}
	return *v, true
}

// OldAnimeSeason returns the old "anime_season" field's value of the Episode entity.
// If the Episode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EpisodeMutation) OldAnimeSeason(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnimeSeason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnimeSeason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnimeSeason: %w", err)
	}
	return oldValue.AnimeSeason, nil
}

// AddAnimeSeason adds i to the "anime_season" field.
func (m *EpisodeMutation) AddAnimeSeason(i int) {
	if m.addanime_season != nil {
		*m.addanime_season += i
	} else {
		m.addanime_season = &i
	}
}

// AddedAnimeSeason returns the value that was added to the "anime_season" field in this mutation.
func (m *EpisodeMutation) AddedAnimeSeason() (r int, exists bool) {
	v := m.addanime_season
	if v == nil {
		return
	}
	return *v, true
}

// ResetAnimeSeason resets all changes to the "anime_season" field.
func (m *EpisodeMutation) ResetAnimeSeason() {
	m.anime_season = nil
	m.addanime_season = nil
}

// SetResolution sets the "resolution" field.
func (m *EpisodeMutation) SetResolution(s string) {
	m.resolution = &s
}

// Resolution returns the value of the "resolution" field in the mutation.
func (m *EpisodeMutation) Resolution() (r string, exists bool) {
	v := m.resolution
	if v == nil {
		return
	}
	return *v, true
}

// OldResolution returns the old "resolution" field's value of the Episode entity.
// If the Episode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EpisodeMutation) OldResolution(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResolution is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResolution requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResolution: %w", err)
	}
	return oldValue.Resolution, nil
}

// ClearResolution clears the value of the "resolution" field.
func (m *EpisodeMutation) ClearResolution() {
	m.resolution = nil
	m.clearedFields[episode.FieldResolution] = struct{}{}
}

// ResolutionCleared returns if the "resolution" field was cleared in this mutation.
func (m *EpisodeMutation) ResolutionCleared() bool {
	_, ok := m.clearedFields[episode.FieldResolution]
	return ok
}

// ResetResolution resets all changes to the "resolution" field.
func (m *EpisodeMutation) ResetResolution() {
	m.resolution = nil
	delete(m.clearedFields, episode.FieldResolution)
}

// SetVideoCodec sets the "video_codec" field.
func (m *EpisodeMutation) SetVideoCodec(s string) {
	m.video_codec = &s
}

// VideoCodec returns the value of the "video_codec" field in the mutation.
func (m *EpisodeMutation) VideoCodec() (r string, exists bool) {
	v := m.video_codec
	if v == nil {
		return
	}
	return *v, true
}

// OldVideoCodec returns the old "video_codec" field's value of the Episode entity.
// If the Episode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EpisodeMutation) OldVideoCodec(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVideoCodec is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVideoCodec requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVideoCodec: %w", err)
	}
	return oldValue.VideoCodec, nil
}

// ClearVideoCodec clears the value of the "video_codec" field.
func (m *EpisodeMutation) ClearVideoCodec() {
	m.video_codec = nil
	m.clearedFields[episode.FieldVideoCodec] = struct{}{}
}

// VideoCodecCleared returns if the "video_codec" field was cleared in this mutation.
func (m *EpisodeMutation) VideoCodecCleared() bool {
	_, ok := m.clearedFields[episode.FieldVideoCodec]
	return ok
}

// ResetVideoCodec resets all changes to the "video_codec" field.
func (m *EpisodeMutation) ResetVideoCodec() {
	m.video_codec = nil
	delete(m.clearedFields, episode.FieldVideoCodec)
}

// SetAudioCodec sets the "audio_codec" field.
func (m *EpisodeMutation) SetAudioCodec(s string) {
	m.audio_codec = &s
}

// AudioCodec returns the value of the "audio_codec" field in the mutation.
func (m *EpisodeMutation) AudioCodec() (r string, exists bool) {
	v := m.audio_codec
	if v == nil {
		return
	}
	return *v, true
}

// OldAudioCodec returns the old "audio_codec" field's value of the Episode entity.
// If the Episode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EpisodeMutation) OldAudioCodec(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAudioCodec is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAudioCodec requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAudioCodec: %w", err)
	}
	return oldValue.AudioCodec, nil
}

// ClearAudioCodec clears the value of the "audio_codec" field.
func (m *EpisodeMutation) ClearAudioCodec() {
	m.audio_codec = nil
	m.clearedFields[episode.FieldAudioCodec] = struct{}{}
}

// AudioCodecCleared returns if the "audio_codec" field was cleared in this mutation.
func (m *EpisodeMutation) AudioCodecCleared() bool {
	_, ok := m.clearedFields[episode.FieldAudioCodec]
	return ok
}

// ResetAudioCodec resets all changes to the "audio_codec" field.
func (m *EpisodeMutation) ResetAudioCodec() {
	m.audio_codec = nil
	delete(m.clearedFields, episode.FieldAudioCodec)
}

// SetTitleID sets the "title" edge to the Anime entity by id.
func (m *EpisodeMutation) SetTitleID(id int) {
	m.title = &id
}

// ClearTitle clears the "title" edge to the Anime entity.
func (m *EpisodeMutation) ClearTitle() {
	m.clearedtitle = true
}

// TitleCleared reports if the "title" edge to the Anime entity was cleared.
func (m *EpisodeMutation) TitleCleared() bool {
	return m.clearedtitle
}

// TitleID returns the "title" edge ID in the mutation.
func (m *EpisodeMutation) TitleID() (id int, exists bool) {
	if m.title != nil {
		return *m.title, true
	}
	return
}

// TitleIDs returns the "title" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TitleID instead. It exists only for internal usage by the builders.
func (m *EpisodeMutation) TitleIDs() (ids []int) {
	if id := m.title; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTitle resets all changes to the "title" edge.
func (m *EpisodeMutation) ResetTitle() {
	m.title = nil
	m.clearedtitle = false
}

// SetReleaseGroupID sets the "release_group" edge to the ReleaseGroup entity by id.
func (m *EpisodeMutation) SetReleaseGroupID(id int) {
	m.release_group = &id
}

// ClearReleaseGroup clears the "release_group" edge to the ReleaseGroup entity.
func (m *EpisodeMutation) ClearReleaseGroup() {
	m.clearedrelease_group = true
}

// ReleaseGroupCleared reports if the "release_group" edge to the ReleaseGroup entity was cleared.
func (m *EpisodeMutation) ReleaseGroupCleared() bool {
	return m.clearedrelease_group
}

// ReleaseGroupID returns the "release_group" edge ID in the mutation.
func (m *EpisodeMutation) ReleaseGroupID() (id int, exists bool) {
	if m.release_group != nil {
		return *m.release_group, true
	}
	return
}

// ReleaseGroupIDs returns the "release_group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ReleaseGroupID instead. It exists only for internal usage by the builders.
func (m *EpisodeMutation) ReleaseGroupIDs() (ids []int) {
	if id := m.release_group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetReleaseGroup resets all changes to the "release_group" edge.
func (m *EpisodeMutation) ResetReleaseGroup() {
	m.release_group = nil
	m.clearedrelease_group = false
}

// Where appends a list predicates to the EpisodeMutation builder.
func (m *EpisodeMutation) Where(ps ...predicate.Episode) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EpisodeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EpisodeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Episode, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EpisodeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EpisodeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Episode).
func (m *EpisodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EpisodeMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.view_url != nil {
		fields = append(fields, episode.FieldViewURL)
	}
	if m.download_url != nil {
		fields = append(fields, episode.FieldDownloadURL)
	}
	if m.file_name != nil {
		fields = append(fields, episode.FieldFileName)
	}
	if m.file_size != nil {
		fields = append(fields, episode.FieldFileSize)
	}
	if m.publish_date != nil {
		fields = append(fields, episode.FieldPublishDate)
	}
	if m.episode_number != nil {
		fields = append(fields, episode.FieldEpisodeNumber)
	}
	if m.anime_season != nil {
		fields = append(fields, episode.FieldAnimeSeason)
	}
	if m.resolution != nil {
		fields = append(fields, episode.FieldResolution)
	}
	if m.video_codec != nil {
		fields = append(fields, episode.FieldVideoCodec)
	}
	if m.audio_codec != nil {
		fields = append(fields, episode.FieldAudioCodec)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EpisodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case episode.FieldViewURL:
		return m.ViewURL()
	case episode.FieldDownloadURL:
		return m.DownloadURL()
	case episode.FieldFileName:
		return m.FileName()
	case episode.FieldFileSize:
		return m.FileSize()
	case episode.FieldPublishDate:
		return m.PublishDate()
	case episode.FieldEpisodeNumber:
		return m.EpisodeNumber()
	case episode.FieldAnimeSeason:
		return m.AnimeSeason()
	case episode.FieldResolution:
		return m.Resolution()
	case episode.FieldVideoCodec:
		return m.VideoCodec()
	case episode.FieldAudioCodec:
		return m.AudioCodec()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EpisodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case episode.FieldViewURL:
		return m.OldViewURL(ctx)
	case episode.FieldDownloadURL:
		return m.OldDownloadURL(ctx)
	case episode.FieldFileName:
		return m.OldFileName(ctx)
	case episode.FieldFileSize:
		return m.OldFileSize(ctx)
	case episode.FieldPublishDate:
		return m.OldPublishDate(ctx)
	case episode.FieldEpisodeNumber:
		return m.OldEpisodeNumber(ctx)
	case episode.FieldAnimeSeason:
		return m.OldAnimeSeason(ctx)
	case episode.FieldResolution:
		return m.OldResolution(ctx)
	case episode.FieldVideoCodec:
		return m.OldVideoCodec(ctx)
	case episode.FieldAudioCodec:
		return m.OldAudioCodec(ctx)
	}
	return nil, fmt.Errorf("unknown Episode field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EpisodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case episode.FieldViewURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetViewURL(v)
		return nil
	case episode.FieldDownloadURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDownloadURL(v)
		return nil
	case episode.FieldFileName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileName(v)
		return nil
	case episode.FieldFileSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileSize(v)
		return nil
	case episode.FieldPublishDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublishDate(v)
		return nil
	case episode.FieldEpisodeNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEpisodeNumber(v)
		return nil
	case episode.FieldAnimeSeason:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnimeSeason(v)
		return nil
	case episode.FieldResolution:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResolution(v)
		return nil
	case episode.FieldVideoCodec:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVideoCodec(v)
		return nil
	case episode.FieldAudioCodec:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAudioCodec(v)
		return nil
	}
	return fmt.Errorf("unknown Episode field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EpisodeMutation) AddedFields() []string {
	var fields []string
	if m.addfile_size != nil {
		fields = append(fields, episode.FieldFileSize)
	}
	if m.addepisode_number != nil {
		fields = append(fields, episode.FieldEpisodeNumber)
	}
	if m.addanime_season != nil {
		fields = append(fields, episode.FieldAnimeSeason)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EpisodeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case episode.FieldFileSize:
		return m.AddedFileSize()
	case episode.FieldEpisodeNumber:
		return m.AddedEpisodeNumber()
	case episode.FieldAnimeSeason:
		return m.AddedAnimeSeason()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EpisodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case episode.FieldFileSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFileSize(v)
		return nil
	case episode.FieldEpisodeNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEpisodeNumber(v)
		return nil
	case episode.FieldAnimeSeason:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAnimeSeason(v)
		return nil
	}
	return fmt.Errorf("unknown Episode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EpisodeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(episode.FieldResolution) {
		fields = append(fields, episode.FieldResolution)
	}
	if m.FieldCleared(episode.FieldVideoCodec) {
		fields = append(fields, episode.FieldVideoCodec)
	}
	if m.FieldCleared(episode.FieldAudioCodec) {
		fields = append(fields, episode.FieldAudioCodec)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EpisodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EpisodeMutation) ClearField(name string) error {
	switch name {
	case episode.FieldResolution:
		m.ClearResolution()
		return nil
	case episode.FieldVideoCodec:
		m.ClearVideoCodec()
		return nil
	case episode.FieldAudioCodec:
		m.ClearAudioCodec()
		return nil
	}
	return fmt.Errorf("unknown Episode nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EpisodeMutation) ResetField(name string) error {
	switch name {
	case episode.FieldViewURL:
		m.ResetViewURL()
		return nil
	case episode.FieldDownloadURL:
		m.ResetDownloadURL()
		return nil
	case episode.FieldFileName:
		m.ResetFileName()
		return nil
	case episode.FieldFileSize:
		m.ResetFileSize()
		return nil
	case episode.FieldPublishDate:
		m.ResetPublishDate()
		return nil
	case episode.FieldEpisodeNumber:
		m.ResetEpisodeNumber()
		return nil
	case episode.FieldAnimeSeason:
		m.ResetAnimeSeason()
		return nil
	case episode.FieldResolution:
		m.ResetResolution()
		return nil
	case episode.FieldVideoCodec:
		m.ResetVideoCodec()
		return nil
	case episode.FieldAudioCodec:
		m.ResetAudioCodec()
		return nil
	}
	return fmt.Errorf("unknown Episode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EpisodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.title != nil {
		edges = append(edges, episode.EdgeTitle)
	}
	if m.release_group != nil {
		edges = append(edges, episode.EdgeReleaseGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EpisodeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case episode.EdgeTitle:
		if id := m.title; id != nil {
			return []ent.Value{*id}
		}
	case episode.EdgeReleaseGroup:
		if id := m.release_group; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EpisodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EpisodeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EpisodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtitle {
		edges = append(edges, episode.EdgeTitle)
	}
	if m.clearedrelease_group {
		edges = append(edges, episode.EdgeReleaseGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EpisodeMutation) EdgeCleared(name string) bool {
	switch name {
	case episode.EdgeTitle:
		return m.clearedtitle
	case episode.EdgeReleaseGroup:
		return m.clearedrelease_group
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EpisodeMutation) ClearEdge(name string) error {
	switch name {
	case episode.EdgeTitle:
		m.ClearTitle()
		return nil
	case episode.EdgeReleaseGroup:
		m.ClearReleaseGroup()
		return nil
	}
	return fmt.Errorf("unknown Episode unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EpisodeMutation) ResetEdge(name string) error {
	switch name {
	case episode.EdgeTitle:
		m.ResetTitle()
		return nil
	case episode.EdgeReleaseGroup:
		m.ResetReleaseGroup()
		return nil
	}
	return fmt.Errorf("unknown Episode edge %s", name)
}

// IrregularMutation represents an operation that mutates the Irregular nodes in the graph.
type IrregularMutation struct {
	config
	op            Op
	typ           string
	id            *int
	view_url      *string
	download_url  *string
	file_name     *string
	file_size     *int
	addfile_size  *int
	publish_date  *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Irregular, error)
	predicates    []predicate.Irregular
}

var _ ent.Mutation = (*IrregularMutation)(nil)

// irregularOption allows management of the mutation configuration using functional options.
type irregularOption func(*IrregularMutation)

// newIrregularMutation creates new mutation for the Irregular entity.
func newIrregularMutation(c config, op Op, opts ...irregularOption) *IrregularMutation {
	m := &IrregularMutation{
		config:        c,
		op:            op,
		typ:           TypeIrregular,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIrregularID sets the ID field of the mutation.
func withIrregularID(id int) irregularOption {
	return func(m *IrregularMutation) {
		var (
			err   error
			once  sync.Once
			value *Irregular
		)
		m.oldValue = func(ctx context.Context) (*Irregular, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Irregular.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIrregular sets the old Irregular of the mutation.
func withIrregular(node *Irregular) irregularOption {
	return func(m *IrregularMutation) {
		m.oldValue = func(context.Context) (*Irregular, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IrregularMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IrregularMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IrregularMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IrregularMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Irregular.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetViewURL sets the "view_url" field.
func (m *IrregularMutation) SetViewURL(s string) {
	m.view_url = &s
}

// ViewURL returns the value of the "view_url" field in the mutation.
func (m *IrregularMutation) ViewURL() (r string, exists bool) {
	v := m.view_url
	if v == nil {
		return
	}
	return *v, true
}

// OldViewURL returns the old "view_url" field's value of the Irregular entity.
// If the Irregular object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IrregularMutation) OldViewURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldViewURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldViewURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldViewURL: %w", err)
	}
	return oldValue.ViewURL, nil
}

// ResetViewURL resets all changes to the "view_url" field.
func (m *IrregularMutation) ResetViewURL() {
	m.view_url = nil
}

// SetDownloadURL sets the "download_url" field.
func (m *IrregularMutation) SetDownloadURL(s string) {
	m.download_url = &s
}

// DownloadURL returns the value of the "download_url" field in the mutation.
func (m *IrregularMutation) DownloadURL() (r string, exists bool) {
	v := m.download_url
	if v == nil {
		return
	}
	return *v, true
}

// OldDownloadURL returns the old "download_url" field's value of the Irregular entity.
// If the Irregular object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IrregularMutation) OldDownloadURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDownloadURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDownloadURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDownloadURL: %w", err)
	}
	return oldValue.DownloadURL, nil
}

// ResetDownloadURL resets all changes to the "download_url" field.
func (m *IrregularMutation) ResetDownloadURL() {
	m.download_url = nil
}

// SetFileName sets the "file_name" field.
func (m *IrregularMutation) SetFileName(s string) {
	m.file_name = &s
}

// FileName returns the value of the "file_name" field in the mutation.
func (m *IrregularMutation) FileName() (r string, exists bool) {
	v := m.file_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFileName returns the old "file_name" field's value of the Irregular entity.
// If the Irregular object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IrregularMutation) OldFileName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileName: %w", err)
	}
	return oldValue.FileName, nil
}

// ResetFileName resets all changes to the "file_name" field.
func (m *IrregularMutation) ResetFileName() {
	m.file_name = nil
}

// SetFileSize sets the "file_size" field.
func (m *IrregularMutation) SetFileSize(i int) {
	m.file_size = &i
	m.addfile_size = nil
}

// FileSize returns the value of the "file_size" field in the mutation.
func (m *IrregularMutation) FileSize() (r int, exists bool) {
	v := m.file_size
	if v == nil {
		return
	}
	return *v, true
}

// OldFileSize returns the old "file_size" field's value of the Irregular entity.
// If the Irregular object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IrregularMutation) OldFileSize(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileSize: %w", err)
	}
	return oldValue.FileSize, nil
}

// AddFileSize adds i to the "file_size" field.
func (m *IrregularMutation) AddFileSize(i int) {
	if m.addfile_size != nil {
		*m.addfile_size += i
	} else {
		m.addfile_size = &i
	}
}

// AddedFileSize returns the value that was added to the "file_size" field in this mutation.
func (m *IrregularMutation) AddedFileSize() (r int, exists bool) {
	v := m.addfile_size
	if v == nil {
		return
	}
	return *v, true
}

// ResetFileSize resets all changes to the "file_size" field.
func (m *IrregularMutation) ResetFileSize() {
	m.file_size = nil
	m.addfile_size = nil
}

// SetPublishDate sets the "publish_date" field.
func (m *IrregularMutation) SetPublishDate(t time.Time) {
	m.publish_date = &t
}

// PublishDate returns the value of the "publish_date" field in the mutation.
func (m *IrregularMutation) PublishDate() (r time.Time, exists bool) {
	v := m.publish_date
	if v == nil {
		return
	}
	return *v, true
}

// OldPublishDate returns the old "publish_date" field's value of the Irregular entity.
// If the Irregular object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IrregularMutation) OldPublishDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublishDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublishDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublishDate: %w", err)
	}
	return oldValue.PublishDate, nil
}

// ResetPublishDate resets all changes to the "publish_date" field.
func (m *IrregularMutation) ResetPublishDate() {
	m.publish_date = nil
}

// Where appends a list predicates to the IrregularMutation builder.
func (m *IrregularMutation) Where(ps ...predicate.Irregular) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the IrregularMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *IrregularMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Irregular, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *IrregularMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *IrregularMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Irregular).
func (m *IrregularMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IrregularMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.view_url != nil {
		fields = append(fields, irregular.FieldViewURL)
	}
	if m.download_url != nil {
		fields = append(fields, irregular.FieldDownloadURL)
	}
	if m.file_name != nil {
		fields = append(fields, irregular.FieldFileName)
	}
	if m.file_size != nil {
		fields = append(fields, irregular.FieldFileSize)
	}
	if m.publish_date != nil {
		fields = append(fields, irregular.FieldPublishDate)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IrregularMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case irregular.FieldViewURL:
		return m.ViewURL()
	case irregular.FieldDownloadURL:
		return m.DownloadURL()
	case irregular.FieldFileName:
		return m.FileName()
	case irregular.FieldFileSize:
		return m.FileSize()
	case irregular.FieldPublishDate:
		return m.PublishDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IrregularMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case irregular.FieldViewURL:
		return m.OldViewURL(ctx)
	case irregular.FieldDownloadURL:
		return m.OldDownloadURL(ctx)
	case irregular.FieldFileName:
		return m.OldFileName(ctx)
	case irregular.FieldFileSize:
		return m.OldFileSize(ctx)
	case irregular.FieldPublishDate:
		return m.OldPublishDate(ctx)
	}
	return nil, fmt.Errorf("unknown Irregular field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IrregularMutation) SetField(name string, value ent.Value) error {
	switch name {
	case irregular.FieldViewURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetViewURL(v)
		return nil
	case irregular.FieldDownloadURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDownloadURL(v)
		return nil
	case irregular.FieldFileName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileName(v)
		return nil
	case irregular.FieldFileSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileSize(v)
		return nil
	case irregular.FieldPublishDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublishDate(v)
		return nil
	}
	return fmt.Errorf("unknown Irregular field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IrregularMutation) AddedFields() []string {
	var fields []string
	if m.addfile_size != nil {
		fields = append(fields, irregular.FieldFileSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IrregularMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case irregular.FieldFileSize:
		return m.AddedFileSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IrregularMutation) AddField(name string, value ent.Value) error {
	switch name {
	case irregular.FieldFileSize:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFileSize(v)
		return nil
	}
	return fmt.Errorf("unknown Irregular numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IrregularMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IrregularMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IrregularMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Irregular nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IrregularMutation) ResetField(name string) error {
	switch name {
	case irregular.FieldViewURL:
		m.ResetViewURL()
		return nil
	case irregular.FieldDownloadURL:
		m.ResetDownloadURL()
		return nil
	case irregular.FieldFileName:
		m.ResetFileName()
		return nil
	case irregular.FieldFileSize:
		m.ResetFileSize()
		return nil
	case irregular.FieldPublishDate:
		m.ResetPublishDate()
		return nil
	}
	return fmt.Errorf("unknown Irregular field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IrregularMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IrregularMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IrregularMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IrregularMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IrregularMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IrregularMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IrregularMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Irregular unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IrregularMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Irregular edge %s", name)
}

// ReleaseGroupMutation represents an operation that mutates the ReleaseGroup nodes in the graph.
type ReleaseGroupMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	clearedFields   map[string]struct{}
	episodes        map[int]struct{}
	removedepisodes map[int]struct{}
	clearedepisodes bool
	done            bool
	oldValue        func(context.Context) (*ReleaseGroup, error)
	predicates      []predicate.ReleaseGroup
}

var _ ent.Mutation = (*ReleaseGroupMutation)(nil)

// releasegroupOption allows management of the mutation configuration using functional options.
type releasegroupOption func(*ReleaseGroupMutation)

// newReleaseGroupMutation creates new mutation for the ReleaseGroup entity.
func newReleaseGroupMutation(c config, op Op, opts ...releasegroupOption) *ReleaseGroupMutation {
	m := &ReleaseGroupMutation{
		config:        c,
		op:            op,
		typ:           TypeReleaseGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withReleaseGroupID sets the ID field of the mutation.
func withReleaseGroupID(id int) releasegroupOption {
	return func(m *ReleaseGroupMutation) {
		var (
			err   error
			once  sync.Once
			value *ReleaseGroup
		)
		m.oldValue = func(ctx context.Context) (*ReleaseGroup, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ReleaseGroup.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReleaseGroup sets the old ReleaseGroup of the mutation.
func withReleaseGroup(node *ReleaseGroup) releasegroupOption {
	return func(m *ReleaseGroupMutation) {
		m.oldValue = func(context.Context) (*ReleaseGroup, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReleaseGroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReleaseGroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ReleaseGroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ReleaseGroupMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ReleaseGroup.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ReleaseGroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ReleaseGroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ReleaseGroup entity.
// If the ReleaseGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReleaseGroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ReleaseGroupMutation) ResetName() {
	m.name = nil
}

// AddEpisodeIDs adds the "episodes" edge to the Episode entity by ids.
func (m *ReleaseGroupMutation) AddEpisodeIDs(ids ...int) {
	if m.episodes == nil {
		m.episodes = make(map[int]struct{})
	}
	for i := range ids {
		m.episodes[ids[i]] = struct{}{}
	}
}

// ClearEpisodes clears the "episodes" edge to the Episode entity.
func (m *ReleaseGroupMutation) ClearEpisodes() {
	m.clearedepisodes = true
}

// EpisodesCleared reports if the "episodes" edge to the Episode entity was cleared.
func (m *ReleaseGroupMutation) EpisodesCleared() bool {
	return m.clearedepisodes
}

// RemoveEpisodeIDs removes the "episodes" edge to the Episode entity by IDs.
func (m *ReleaseGroupMutation) RemoveEpisodeIDs(ids ...int) {
	if m.removedepisodes == nil {
		m.removedepisodes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.episodes, ids[i])
		m.removedepisodes[ids[i]] = struct{}{}
	}
}

// RemovedEpisodes returns the removed IDs of the "episodes" edge to the Episode entity.
func (m *ReleaseGroupMutation) RemovedEpisodesIDs() (ids []int) {
	for id := range m.removedepisodes {
		ids = append(ids, id)
	}
	return
}

// EpisodesIDs returns the "episodes" edge IDs in the mutation.
func (m *ReleaseGroupMutation) EpisodesIDs() (ids []int) {
	for id := range m.episodes {
		ids = append(ids, id)
	}
	return
}

// ResetEpisodes resets all changes to the "episodes" edge.
func (m *ReleaseGroupMutation) ResetEpisodes() {
	m.episodes = nil
	m.clearedepisodes = false
	m.removedepisodes = nil
}

// Where appends a list predicates to the ReleaseGroupMutation builder.
func (m *ReleaseGroupMutation) Where(ps ...predicate.ReleaseGroup) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ReleaseGroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ReleaseGroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ReleaseGroup, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ReleaseGroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ReleaseGroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ReleaseGroup).
func (m *ReleaseGroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ReleaseGroupMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, releasegroup.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ReleaseGroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case releasegroup.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ReleaseGroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case releasegroup.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown ReleaseGroup field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReleaseGroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case releasegroup.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown ReleaseGroup field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ReleaseGroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ReleaseGroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReleaseGroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ReleaseGroup numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ReleaseGroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ReleaseGroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReleaseGroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ReleaseGroup nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ReleaseGroupMutation) ResetField(name string) error {
	switch name {
	case releasegroup.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown ReleaseGroup field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ReleaseGroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.episodes != nil {
		edges = append(edges, releasegroup.EdgeEpisodes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ReleaseGroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case releasegroup.EdgeEpisodes:
		ids := make([]ent.Value, 0, len(m.episodes))
		for id := range m.episodes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ReleaseGroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedepisodes != nil {
		edges = append(edges, releasegroup.EdgeEpisodes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ReleaseGroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case releasegroup.EdgeEpisodes:
		ids := make([]ent.Value, 0, len(m.removedepisodes))
		for id := range m.removedepisodes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ReleaseGroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedepisodes {
		edges = append(edges, releasegroup.EdgeEpisodes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ReleaseGroupMutation) EdgeCleared(name string) bool {
	switch name {
	case releasegroup.EdgeEpisodes:
		return m.clearedepisodes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ReleaseGroupMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ReleaseGroup unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ReleaseGroupMutation) ResetEdge(name string) error {
	switch name {
	case releasegroup.EdgeEpisodes:
		m.ResetEpisodes()
		return nil
	}
	return fmt.Errorf("unknown ReleaseGroup edge %s", name)
}
