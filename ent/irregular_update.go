// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eiri/konyanko/ent/irregular"
	"github.com/eiri/konyanko/ent/predicate"
)

// IrregularUpdate is the builder for updating Irregular entities.
type IrregularUpdate struct {
	config
	hooks    []Hook
	mutation *IrregularMutation
}

// Where appends a list predicates to the IrregularUpdate builder.
func (iu *IrregularUpdate) Where(ps ...predicate.Irregular) *IrregularUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetViewURL sets the "view_url" field.
func (iu *IrregularUpdate) SetViewURL(s string) *IrregularUpdate {
	iu.mutation.SetViewURL(s)
	return iu
}

// SetDownloadURL sets the "download_url" field.
func (iu *IrregularUpdate) SetDownloadURL(s string) *IrregularUpdate {
	iu.mutation.SetDownloadURL(s)
	return iu
}

// SetFileName sets the "file_name" field.
func (iu *IrregularUpdate) SetFileName(s string) *IrregularUpdate {
	iu.mutation.SetFileName(s)
	return iu
}

// SetFileSize sets the "file_size" field.
func (iu *IrregularUpdate) SetFileSize(i int) *IrregularUpdate {
	iu.mutation.ResetFileSize()
	iu.mutation.SetFileSize(i)
	return iu
}

// AddFileSize adds i to the "file_size" field.
func (iu *IrregularUpdate) AddFileSize(i int) *IrregularUpdate {
	iu.mutation.AddFileSize(i)
	return iu
}

// Mutation returns the IrregularMutation object of the builder.
func (iu *IrregularUpdate) Mutation() *IrregularMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IrregularUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IrregularUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IrregularUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IrregularUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *IrregularUpdate) check() error {
	if v, ok := iu.mutation.FileName(); ok {
		if err := irregular.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`ent: validator failed for field "Irregular.file_name": %w`, err)}
		}
	}
	if v, ok := iu.mutation.FileSize(); ok {
		if err := irregular.FileSizeValidator(v); err != nil {
			return &ValidationError{Name: "file_size", err: fmt.Errorf(`ent: validator failed for field "Irregular.file_size": %w`, err)}
		}
	}
	return nil
}

func (iu *IrregularUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(irregular.Table, irregular.Columns, sqlgraph.NewFieldSpec(irregular.FieldID, field.TypeInt))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.ViewURL(); ok {
		_spec.SetField(irregular.FieldViewURL, field.TypeString, value)
	}
	if value, ok := iu.mutation.DownloadURL(); ok {
		_spec.SetField(irregular.FieldDownloadURL, field.TypeString, value)
	}
	if value, ok := iu.mutation.FileName(); ok {
		_spec.SetField(irregular.FieldFileName, field.TypeString, value)
	}
	if value, ok := iu.mutation.FileSize(); ok {
		_spec.SetField(irregular.FieldFileSize, field.TypeInt, value)
	}
	if value, ok := iu.mutation.AddedFileSize(); ok {
		_spec.AddField(irregular.FieldFileSize, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{irregular.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IrregularUpdateOne is the builder for updating a single Irregular entity.
type IrregularUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IrregularMutation
}

// SetViewURL sets the "view_url" field.
func (iuo *IrregularUpdateOne) SetViewURL(s string) *IrregularUpdateOne {
	iuo.mutation.SetViewURL(s)
	return iuo
}

// SetDownloadURL sets the "download_url" field.
func (iuo *IrregularUpdateOne) SetDownloadURL(s string) *IrregularUpdateOne {
	iuo.mutation.SetDownloadURL(s)
	return iuo
}

// SetFileName sets the "file_name" field.
func (iuo *IrregularUpdateOne) SetFileName(s string) *IrregularUpdateOne {
	iuo.mutation.SetFileName(s)
	return iuo
}

// SetFileSize sets the "file_size" field.
func (iuo *IrregularUpdateOne) SetFileSize(i int) *IrregularUpdateOne {
	iuo.mutation.ResetFileSize()
	iuo.mutation.SetFileSize(i)
	return iuo
}

// AddFileSize adds i to the "file_size" field.
func (iuo *IrregularUpdateOne) AddFileSize(i int) *IrregularUpdateOne {
	iuo.mutation.AddFileSize(i)
	return iuo
}

// Mutation returns the IrregularMutation object of the builder.
func (iuo *IrregularUpdateOne) Mutation() *IrregularMutation {
	return iuo.mutation
}

// Where appends a list predicates to the IrregularUpdate builder.
func (iuo *IrregularUpdateOne) Where(ps ...predicate.Irregular) *IrregularUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IrregularUpdateOne) Select(field string, fields ...string) *IrregularUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Irregular entity.
func (iuo *IrregularUpdateOne) Save(ctx context.Context) (*Irregular, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IrregularUpdateOne) SaveX(ctx context.Context) *Irregular {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IrregularUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IrregularUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *IrregularUpdateOne) check() error {
	if v, ok := iuo.mutation.FileName(); ok {
		if err := irregular.FileNameValidator(v); err != nil {
			return &ValidationError{Name: "file_name", err: fmt.Errorf(`ent: validator failed for field "Irregular.file_name": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.FileSize(); ok {
		if err := irregular.FileSizeValidator(v); err != nil {
			return &ValidationError{Name: "file_size", err: fmt.Errorf(`ent: validator failed for field "Irregular.file_size": %w`, err)}
		}
	}
	return nil
}

func (iuo *IrregularUpdateOne) sqlSave(ctx context.Context) (_node *Irregular, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(irregular.Table, irregular.Columns, sqlgraph.NewFieldSpec(irregular.FieldID, field.TypeInt))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Irregular.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, irregular.FieldID)
		for _, f := range fields {
			if !irregular.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != irregular.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.ViewURL(); ok {
		_spec.SetField(irregular.FieldViewURL, field.TypeString, value)
	}
	if value, ok := iuo.mutation.DownloadURL(); ok {
		_spec.SetField(irregular.FieldDownloadURL, field.TypeString, value)
	}
	if value, ok := iuo.mutation.FileName(); ok {
		_spec.SetField(irregular.FieldFileName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.FileSize(); ok {
		_spec.SetField(irregular.FieldFileSize, field.TypeInt, value)
	}
	if value, ok := iuo.mutation.AddedFileSize(); ok {
		_spec.AddField(irregular.FieldFileSize, field.TypeInt, value)
	}
	_node = &Irregular{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{irregular.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
