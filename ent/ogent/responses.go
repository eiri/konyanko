// Code generated by ent, DO NOT EDIT.

package ogent

import "github.com/eiri/konyanko/ent"

func NewAnimeCreate(e *ent.Anime) *AnimeCreate {
	if e == nil {
		return nil
	}
	var ret AnimeCreate
	ret.ID = e.ID
	ret.Title = e.Title
	return &ret
}

func NewAnimeCreates(es []*ent.Anime) []AnimeCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]AnimeCreate, len(es))
	for i, e := range es {
		r[i] = NewAnimeCreate(e).Elem()
	}
	return r
}

func (a *AnimeCreate) Elem() AnimeCreate {
	if a == nil {
		return AnimeCreate{}
	}
	return *a
}

func NewAnimeList(e *ent.Anime) *AnimeList {
	if e == nil {
		return nil
	}
	var ret AnimeList
	ret.ID = e.ID
	ret.Title = e.Title
	return &ret
}

func NewAnimeLists(es []*ent.Anime) []AnimeList {
	if len(es) == 0 {
		return nil
	}
	r := make([]AnimeList, len(es))
	for i, e := range es {
		r[i] = NewAnimeList(e).Elem()
	}
	return r
}

func (a *AnimeList) Elem() AnimeList {
	if a == nil {
		return AnimeList{}
	}
	return *a
}

func NewAnimeRead(e *ent.Anime) *AnimeRead {
	if e == nil {
		return nil
	}
	var ret AnimeRead
	ret.ID = e.ID
	ret.Title = e.Title
	return &ret
}

func NewAnimeReads(es []*ent.Anime) []AnimeRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]AnimeRead, len(es))
	for i, e := range es {
		r[i] = NewAnimeRead(e).Elem()
	}
	return r
}

func (a *AnimeRead) Elem() AnimeRead {
	if a == nil {
		return AnimeRead{}
	}
	return *a
}

func NewAnimeUpdate(e *ent.Anime) *AnimeUpdate {
	if e == nil {
		return nil
	}
	var ret AnimeUpdate
	ret.ID = e.ID
	ret.Title = e.Title
	return &ret
}

func NewAnimeUpdates(es []*ent.Anime) []AnimeUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]AnimeUpdate, len(es))
	for i, e := range es {
		r[i] = NewAnimeUpdate(e).Elem()
	}
	return r
}

func (a *AnimeUpdate) Elem() AnimeUpdate {
	if a == nil {
		return AnimeUpdate{}
	}
	return *a
}

func NewAnimeEpisodesList(e *ent.Episode) *AnimeEpisodesList {
	if e == nil {
		return nil
	}
	var ret AnimeEpisodesList
	ret.ID = e.ID
	ret.EpisodeNumber = e.EpisodeNumber
	ret.AnimeSeason = e.AnimeSeason
	ret.Resolution = NewOptString(e.Resolution)
	ret.VideoCodec = NewOptString(e.VideoCodec)
	ret.AudioCodec = NewOptString(e.AudioCodec)
	return &ret
}

func NewAnimeEpisodesLists(es []*ent.Episode) []AnimeEpisodesList {
	if len(es) == 0 {
		return nil
	}
	r := make([]AnimeEpisodesList, len(es))
	for i, e := range es {
		r[i] = NewAnimeEpisodesList(e).Elem()
	}
	return r
}

func (e *AnimeEpisodesList) Elem() AnimeEpisodesList {
	if e == nil {
		return AnimeEpisodesList{}
	}
	return *e
}

func NewEpisodeCreate(e *ent.Episode) *EpisodeCreate {
	if e == nil {
		return nil
	}
	var ret EpisodeCreate
	ret.ID = e.ID
	ret.EpisodeNumber = e.EpisodeNumber
	ret.AnimeSeason = e.AnimeSeason
	ret.Resolution = NewOptString(e.Resolution)
	ret.VideoCodec = NewOptString(e.VideoCodec)
	ret.AudioCodec = NewOptString(e.AudioCodec)
	return &ret
}

func NewEpisodeCreates(es []*ent.Episode) []EpisodeCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]EpisodeCreate, len(es))
	for i, e := range es {
		r[i] = NewEpisodeCreate(e).Elem()
	}
	return r
}

func (e *EpisodeCreate) Elem() EpisodeCreate {
	if e == nil {
		return EpisodeCreate{}
	}
	return *e
}

func NewEpisodeList(e *ent.Episode) *EpisodeList {
	if e == nil {
		return nil
	}
	var ret EpisodeList
	ret.ID = e.ID
	ret.EpisodeNumber = e.EpisodeNumber
	ret.AnimeSeason = e.AnimeSeason
	ret.Resolution = NewOptString(e.Resolution)
	ret.VideoCodec = NewOptString(e.VideoCodec)
	ret.AudioCodec = NewOptString(e.AudioCodec)
	return &ret
}

func NewEpisodeLists(es []*ent.Episode) []EpisodeList {
	if len(es) == 0 {
		return nil
	}
	r := make([]EpisodeList, len(es))
	for i, e := range es {
		r[i] = NewEpisodeList(e).Elem()
	}
	return r
}

func (e *EpisodeList) Elem() EpisodeList {
	if e == nil {
		return EpisodeList{}
	}
	return *e
}

func NewEpisodeRead(e *ent.Episode) *EpisodeRead {
	if e == nil {
		return nil
	}
	var ret EpisodeRead
	ret.ID = e.ID
	ret.EpisodeNumber = e.EpisodeNumber
	ret.AnimeSeason = e.AnimeSeason
	ret.Resolution = NewOptString(e.Resolution)
	ret.VideoCodec = NewOptString(e.VideoCodec)
	ret.AudioCodec = NewOptString(e.AudioCodec)
	return &ret
}

func NewEpisodeReads(es []*ent.Episode) []EpisodeRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]EpisodeRead, len(es))
	for i, e := range es {
		r[i] = NewEpisodeRead(e).Elem()
	}
	return r
}

func (e *EpisodeRead) Elem() EpisodeRead {
	if e == nil {
		return EpisodeRead{}
	}
	return *e
}

func NewEpisodeUpdate(e *ent.Episode) *EpisodeUpdate {
	if e == nil {
		return nil
	}
	var ret EpisodeUpdate
	ret.ID = e.ID
	ret.EpisodeNumber = e.EpisodeNumber
	ret.AnimeSeason = e.AnimeSeason
	ret.Resolution = NewOptString(e.Resolution)
	ret.VideoCodec = NewOptString(e.VideoCodec)
	ret.AudioCodec = NewOptString(e.AudioCodec)
	return &ret
}

func NewEpisodeUpdates(es []*ent.Episode) []EpisodeUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]EpisodeUpdate, len(es))
	for i, e := range es {
		r[i] = NewEpisodeUpdate(e).Elem()
	}
	return r
}

func (e *EpisodeUpdate) Elem() EpisodeUpdate {
	if e == nil {
		return EpisodeUpdate{}
	}
	return *e
}

func NewEpisodeItemRead(e *ent.Item) *EpisodeItemRead {
	if e == nil {
		return nil
	}
	var ret EpisodeItemRead
	ret.ID = e.ID
	ret.ViewURL = e.ViewURL
	ret.DownloadURL = e.DownloadURL
	ret.FileName = e.FileName
	ret.FileSize = e.FileSize
	ret.PublishDate = OptDateTime{}
	if e.PublishDate != nil {
		ret.PublishDate.SetTo(*e.PublishDate)
	}
	return &ret
}

func NewEpisodeItemReads(es []*ent.Item) []EpisodeItemRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]EpisodeItemRead, len(es))
	for i, e := range es {
		r[i] = NewEpisodeItemRead(e).Elem()
	}
	return r
}

func (i *EpisodeItemRead) Elem() EpisodeItemRead {
	if i == nil {
		return EpisodeItemRead{}
	}
	return *i
}

func NewEpisodeReleaseGroupRead(e *ent.ReleaseGroup) *EpisodeReleaseGroupRead {
	if e == nil {
		return nil
	}
	var ret EpisodeReleaseGroupRead
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewEpisodeReleaseGroupReads(es []*ent.ReleaseGroup) []EpisodeReleaseGroupRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]EpisodeReleaseGroupRead, len(es))
	for i, e := range es {
		r[i] = NewEpisodeReleaseGroupRead(e).Elem()
	}
	return r
}

func (rg *EpisodeReleaseGroupRead) Elem() EpisodeReleaseGroupRead {
	if rg == nil {
		return EpisodeReleaseGroupRead{}
	}
	return *rg
}

func NewEpisodeTitleRead(e *ent.Anime) *EpisodeTitleRead {
	if e == nil {
		return nil
	}
	var ret EpisodeTitleRead
	ret.ID = e.ID
	ret.Title = e.Title
	return &ret
}

func NewEpisodeTitleReads(es []*ent.Anime) []EpisodeTitleRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]EpisodeTitleRead, len(es))
	for i, e := range es {
		r[i] = NewEpisodeTitleRead(e).Elem()
	}
	return r
}

func (a *EpisodeTitleRead) Elem() EpisodeTitleRead {
	if a == nil {
		return EpisodeTitleRead{}
	}
	return *a
}

func NewItemCreate(e *ent.Item) *ItemCreate {
	if e == nil {
		return nil
	}
	var ret ItemCreate
	ret.ID = e.ID
	ret.ViewURL = e.ViewURL
	ret.DownloadURL = e.DownloadURL
	ret.FileName = e.FileName
	ret.FileSize = e.FileSize
	ret.PublishDate = OptDateTime{}
	if e.PublishDate != nil {
		ret.PublishDate.SetTo(*e.PublishDate)
	}
	return &ret
}

func NewItemCreates(es []*ent.Item) []ItemCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ItemCreate, len(es))
	for i, e := range es {
		r[i] = NewItemCreate(e).Elem()
	}
	return r
}

func (i *ItemCreate) Elem() ItemCreate {
	if i == nil {
		return ItemCreate{}
	}
	return *i
}

func NewItemList(e *ent.Item) *ItemList {
	if e == nil {
		return nil
	}
	var ret ItemList
	ret.ID = e.ID
	ret.ViewURL = e.ViewURL
	ret.DownloadURL = e.DownloadURL
	ret.FileName = e.FileName
	ret.FileSize = e.FileSize
	ret.PublishDate = OptDateTime{}
	if e.PublishDate != nil {
		ret.PublishDate.SetTo(*e.PublishDate)
	}
	return &ret
}

func NewItemLists(es []*ent.Item) []ItemList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ItemList, len(es))
	for i, e := range es {
		r[i] = NewItemList(e).Elem()
	}
	return r
}

func (i *ItemList) Elem() ItemList {
	if i == nil {
		return ItemList{}
	}
	return *i
}

func NewItemRead(e *ent.Item) *ItemRead {
	if e == nil {
		return nil
	}
	var ret ItemRead
	ret.ID = e.ID
	ret.ViewURL = e.ViewURL
	ret.DownloadURL = e.DownloadURL
	ret.FileName = e.FileName
	ret.FileSize = e.FileSize
	ret.PublishDate = OptDateTime{}
	if e.PublishDate != nil {
		ret.PublishDate.SetTo(*e.PublishDate)
	}
	return &ret
}

func NewItemReads(es []*ent.Item) []ItemRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]ItemRead, len(es))
	for i, e := range es {
		r[i] = NewItemRead(e).Elem()
	}
	return r
}

func (i *ItemRead) Elem() ItemRead {
	if i == nil {
		return ItemRead{}
	}
	return *i
}

func NewItemUpdate(e *ent.Item) *ItemUpdate {
	if e == nil {
		return nil
	}
	var ret ItemUpdate
	ret.ID = e.ID
	ret.ViewURL = e.ViewURL
	ret.DownloadURL = e.DownloadURL
	ret.FileName = e.FileName
	ret.FileSize = e.FileSize
	ret.PublishDate = OptDateTime{}
	if e.PublishDate != nil {
		ret.PublishDate.SetTo(*e.PublishDate)
	}
	return &ret
}

func NewItemUpdates(es []*ent.Item) []ItemUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ItemUpdate, len(es))
	for i, e := range es {
		r[i] = NewItemUpdate(e).Elem()
	}
	return r
}

func (i *ItemUpdate) Elem() ItemUpdate {
	if i == nil {
		return ItemUpdate{}
	}
	return *i
}

func NewItemEpisodeRead(e *ent.Episode) *ItemEpisodeRead {
	if e == nil {
		return nil
	}
	var ret ItemEpisodeRead
	ret.ID = e.ID
	ret.EpisodeNumber = e.EpisodeNumber
	ret.AnimeSeason = e.AnimeSeason
	ret.Resolution = NewOptString(e.Resolution)
	ret.VideoCodec = NewOptString(e.VideoCodec)
	ret.AudioCodec = NewOptString(e.AudioCodec)
	return &ret
}

func NewItemEpisodeReads(es []*ent.Episode) []ItemEpisodeRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]ItemEpisodeRead, len(es))
	for i, e := range es {
		r[i] = NewItemEpisodeRead(e).Elem()
	}
	return r
}

func (e *ItemEpisodeRead) Elem() ItemEpisodeRead {
	if e == nil {
		return ItemEpisodeRead{}
	}
	return *e
}

func NewReleaseGroupCreate(e *ent.ReleaseGroup) *ReleaseGroupCreate {
	if e == nil {
		return nil
	}
	var ret ReleaseGroupCreate
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewReleaseGroupCreates(es []*ent.ReleaseGroup) []ReleaseGroupCreate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ReleaseGroupCreate, len(es))
	for i, e := range es {
		r[i] = NewReleaseGroupCreate(e).Elem()
	}
	return r
}

func (rg *ReleaseGroupCreate) Elem() ReleaseGroupCreate {
	if rg == nil {
		return ReleaseGroupCreate{}
	}
	return *rg
}

func NewReleaseGroupList(e *ent.ReleaseGroup) *ReleaseGroupList {
	if e == nil {
		return nil
	}
	var ret ReleaseGroupList
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewReleaseGroupLists(es []*ent.ReleaseGroup) []ReleaseGroupList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ReleaseGroupList, len(es))
	for i, e := range es {
		r[i] = NewReleaseGroupList(e).Elem()
	}
	return r
}

func (rg *ReleaseGroupList) Elem() ReleaseGroupList {
	if rg == nil {
		return ReleaseGroupList{}
	}
	return *rg
}

func NewReleaseGroupRead(e *ent.ReleaseGroup) *ReleaseGroupRead {
	if e == nil {
		return nil
	}
	var ret ReleaseGroupRead
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewReleaseGroupReads(es []*ent.ReleaseGroup) []ReleaseGroupRead {
	if len(es) == 0 {
		return nil
	}
	r := make([]ReleaseGroupRead, len(es))
	for i, e := range es {
		r[i] = NewReleaseGroupRead(e).Elem()
	}
	return r
}

func (rg *ReleaseGroupRead) Elem() ReleaseGroupRead {
	if rg == nil {
		return ReleaseGroupRead{}
	}
	return *rg
}

func NewReleaseGroupUpdate(e *ent.ReleaseGroup) *ReleaseGroupUpdate {
	if e == nil {
		return nil
	}
	var ret ReleaseGroupUpdate
	ret.ID = e.ID
	ret.Name = e.Name
	return &ret
}

func NewReleaseGroupUpdates(es []*ent.ReleaseGroup) []ReleaseGroupUpdate {
	if len(es) == 0 {
		return nil
	}
	r := make([]ReleaseGroupUpdate, len(es))
	for i, e := range es {
		r[i] = NewReleaseGroupUpdate(e).Elem()
	}
	return r
}

func (rg *ReleaseGroupUpdate) Elem() ReleaseGroupUpdate {
	if rg == nil {
		return ReleaseGroupUpdate{}
	}
	return *rg
}

func NewReleaseGroupEpisodesList(e *ent.Episode) *ReleaseGroupEpisodesList {
	if e == nil {
		return nil
	}
	var ret ReleaseGroupEpisodesList
	ret.ID = e.ID
	ret.EpisodeNumber = e.EpisodeNumber
	ret.AnimeSeason = e.AnimeSeason
	ret.Resolution = NewOptString(e.Resolution)
	ret.VideoCodec = NewOptString(e.VideoCodec)
	ret.AudioCodec = NewOptString(e.AudioCodec)
	return &ret
}

func NewReleaseGroupEpisodesLists(es []*ent.Episode) []ReleaseGroupEpisodesList {
	if len(es) == 0 {
		return nil
	}
	r := make([]ReleaseGroupEpisodesList, len(es))
	for i, e := range es {
		r[i] = NewReleaseGroupEpisodesList(e).Elem()
	}
	return r
}

func (e *ReleaseGroupEpisodesList) Elem() ReleaseGroupEpisodesList {
	if e == nil {
		return ReleaseGroupEpisodesList{}
	}
	return *e
}
