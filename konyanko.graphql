directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Anime implements Node {
  id: ID!
  title: String!
  episodes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Episodes returned from the connection."""
    orderBy: [EpisodeOrder!]

    """Filtering options for Episodes returned from the connection."""
    where: EpisodeWhereInput
  ): EpisodeConnection!
}
"""A connection to a list of items."""
type AnimeConnection {
  """A list of edges."""
  edges: [AnimeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type AnimeEdge {
  """The item at the end of the edge."""
  node: Anime
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Anime connections"""
input AnimeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Animes."""
  field: AnimeOrderField!
}
"""Properties by which Anime connections can be ordered."""
enum AnimeOrderField {
  TITLE
  EPISODES_COUNT
}
"""
AnimeWhereInput is used for filtering Anime objects.
Input was generated by ent.
"""
input AnimeWhereInput {
  not: AnimeWhereInput
  and: [AnimeWhereInput!]
  or: [AnimeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """episodes edge predicates"""
  hasEpisodes: Boolean
  hasEpisodesWith: [EpisodeWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Episode implements Node {
  id: ID!
  episodeNumber: Int!
  animeSeason: Int!
  resolution: String
  videoCodec: String
  audioCodec: String
  item: Item!
  anime: Anime!
  releaseGroup: ReleaseGroup
}
"""A connection to a list of items."""
type EpisodeConnection {
  """A list of edges."""
  edges: [EpisodeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type EpisodeEdge {
  """The item at the end of the edge."""
  node: Episode
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Episode connections"""
input EpisodeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Episodes."""
  field: EpisodeOrderField!
}
"""Properties by which Episode connections can be ordered."""
enum EpisodeOrderField {
  EPISODE_NUMBER
  ANIME_SEASON
  RESOLUTION
  ITEM_PUBLISH_DATE
  ANIME_TITLE
  RELEASE_GROUP_NAME
}
"""
EpisodeWhereInput is used for filtering Episode objects.
Input was generated by ent.
"""
input EpisodeWhereInput {
  not: EpisodeWhereInput
  and: [EpisodeWhereInput!]
  or: [EpisodeWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """episode_number field predicates"""
  episodeNumber: Int
  episodeNumberNEQ: Int
  episodeNumberIn: [Int!]
  episodeNumberNotIn: [Int!]
  episodeNumberGT: Int
  episodeNumberGTE: Int
  episodeNumberLT: Int
  episodeNumberLTE: Int
  """anime_season field predicates"""
  animeSeason: Int
  animeSeasonNEQ: Int
  animeSeasonIn: [Int!]
  animeSeasonNotIn: [Int!]
  animeSeasonGT: Int
  animeSeasonGTE: Int
  animeSeasonLT: Int
  animeSeasonLTE: Int
  """resolution field predicates"""
  resolution: String
  resolutionNEQ: String
  resolutionIn: [String!]
  resolutionNotIn: [String!]
  resolutionGT: String
  resolutionGTE: String
  resolutionLT: String
  resolutionLTE: String
  resolutionContains: String
  resolutionHasPrefix: String
  resolutionHasSuffix: String
  resolutionIsNil: Boolean
  resolutionNotNil: Boolean
  resolutionEqualFold: String
  resolutionContainsFold: String
  """video_codec field predicates"""
  videoCodec: String
  videoCodecNEQ: String
  videoCodecIn: [String!]
  videoCodecNotIn: [String!]
  videoCodecGT: String
  videoCodecGTE: String
  videoCodecLT: String
  videoCodecLTE: String
  videoCodecContains: String
  videoCodecHasPrefix: String
  videoCodecHasSuffix: String
  videoCodecIsNil: Boolean
  videoCodecNotNil: Boolean
  videoCodecEqualFold: String
  videoCodecContainsFold: String
  """audio_codec field predicates"""
  audioCodec: String
  audioCodecNEQ: String
  audioCodecIn: [String!]
  audioCodecNotIn: [String!]
  audioCodecGT: String
  audioCodecGTE: String
  audioCodecLT: String
  audioCodecLTE: String
  audioCodecContains: String
  audioCodecHasPrefix: String
  audioCodecHasSuffix: String
  audioCodecIsNil: Boolean
  audioCodecNotNil: Boolean
  audioCodecEqualFold: String
  audioCodecContainsFold: String
  """item edge predicates"""
  hasItem: Boolean
  hasItemWith: [ItemWhereInput!]
  """anime edge predicates"""
  hasAnime: Boolean
  hasAnimeWith: [AnimeWhereInput!]
  """release_group edge predicates"""
  hasReleaseGroup: Boolean
  hasReleaseGroupWith: [ReleaseGroupWhereInput!]
}
type Item implements Node {
  id: ID!
  viewURL: String!
  downloadURL: String!
  fileName: String!
  fileSize: Int!
  publishDate: Time!
  episode: Episode
}
"""A connection to a list of items."""
type ItemConnection {
  """A list of edges."""
  edges: [ItemEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ItemEdge {
  """The item at the end of the edge."""
  node: Item
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Item connections"""
input ItemOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Items."""
  field: ItemOrderField!
}
"""Properties by which Item connections can be ordered."""
enum ItemOrderField {
  FILE_NAME
  FILE_SIZE
  PUBLISH_DATE
}
"""
ItemWhereInput is used for filtering Item objects.
Input was generated by ent.
"""
input ItemWhereInput {
  not: ItemWhereInput
  and: [ItemWhereInput!]
  or: [ItemWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """view_url field predicates"""
  viewURL: String
  viewURLNEQ: String
  viewURLIn: [String!]
  viewURLNotIn: [String!]
  viewURLGT: String
  viewURLGTE: String
  viewURLLT: String
  viewURLLTE: String
  viewURLContains: String
  viewURLHasPrefix: String
  viewURLHasSuffix: String
  viewURLEqualFold: String
  viewURLContainsFold: String
  """download_url field predicates"""
  downloadURL: String
  downloadURLNEQ: String
  downloadURLIn: [String!]
  downloadURLNotIn: [String!]
  downloadURLGT: String
  downloadURLGTE: String
  downloadURLLT: String
  downloadURLLTE: String
  downloadURLContains: String
  downloadURLHasPrefix: String
  downloadURLHasSuffix: String
  downloadURLEqualFold: String
  downloadURLContainsFold: String
  """file_name field predicates"""
  fileName: String
  fileNameNEQ: String
  fileNameIn: [String!]
  fileNameNotIn: [String!]
  fileNameGT: String
  fileNameGTE: String
  fileNameLT: String
  fileNameLTE: String
  fileNameContains: String
  fileNameHasPrefix: String
  fileNameHasSuffix: String
  fileNameEqualFold: String
  fileNameContainsFold: String
  """file_size field predicates"""
  fileSize: Int
  fileSizeNEQ: Int
  fileSizeIn: [Int!]
  fileSizeNotIn: [Int!]
  fileSizeGT: Int
  fileSizeGTE: Int
  fileSizeLT: Int
  fileSizeLTE: Int
  """publish_date field predicates"""
  publishDate: Time
  publishDateNEQ: Time
  publishDateIn: [Time!]
  publishDateNotIn: [Time!]
  publishDateGT: Time
  publishDateGTE: Time
  publishDateLT: Time
  publishDateLTE: Time
  """episode edge predicates"""
  hasEpisode: Boolean
  hasEpisodeWith: [EpisodeWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/eiri/konyanko/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  animes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Animes returned from the connection."""
    orderBy: AnimeOrder

    """Filtering options for Animes returned from the connection."""
    where: AnimeWhereInput
  ): AnimeConnection!
  episodes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Episodes returned from the connection."""
    orderBy: [EpisodeOrder!]

    """Filtering options for Episodes returned from the connection."""
    where: EpisodeWhereInput
  ): EpisodeConnection!
  items(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Items returned from the connection."""
    orderBy: [ItemOrder!]

    """Filtering options for Items returned from the connection."""
    where: ItemWhereInput
  ): ItemConnection!
  releaseGroups(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for ReleaseGroups returned from the connection."""
    orderBy: ReleaseGroupOrder

    """Filtering options for ReleaseGroups returned from the connection."""
    where: ReleaseGroupWhereInput
  ): ReleaseGroupConnection!
}
type ReleaseGroup implements Node {
  id: ID!
  name: String!
  episodes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Episodes returned from the connection."""
    orderBy: [EpisodeOrder!]

    """Filtering options for Episodes returned from the connection."""
    where: EpisodeWhereInput
  ): EpisodeConnection!
}
"""A connection to a list of items."""
type ReleaseGroupConnection {
  """A list of edges."""
  edges: [ReleaseGroupEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ReleaseGroupEdge {
  """The item at the end of the edge."""
  node: ReleaseGroup
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for ReleaseGroup connections"""
input ReleaseGroupOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order ReleaseGroups."""
  field: ReleaseGroupOrderField!
}
"""Properties by which ReleaseGroup connections can be ordered."""
enum ReleaseGroupOrderField {
  NAME
  EPISODES_COUNT
}
"""
ReleaseGroupWhereInput is used for filtering ReleaseGroup objects.
Input was generated by ent.
"""
input ReleaseGroupWhereInput {
  not: ReleaseGroupWhereInput
  and: [ReleaseGroupWhereInput!]
  or: [ReleaseGroupWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """episodes edge predicates"""
  hasEpisodes: Boolean
  hasEpisodesWith: [EpisodeWhereInput!]
}
"""The builtin Time type"""
scalar Time
