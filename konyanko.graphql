directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Anime implements Node {
  id: ID!
  title: String!
  episodes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Episodes returned from the connection."""
    orderBy: [EpisodeOrder!]
  ): EpisodeConnection!
}
"""A connection to a list of items."""
type AnimeConnection {
  """A list of edges."""
  edges: [AnimeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type AnimeEdge {
  """The item at the end of the edge."""
  node: Anime
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Anime connections"""
input AnimeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Animes."""
  field: AnimeOrderField!
}
"""Properties by which Anime connections can be ordered."""
enum AnimeOrderField {
  TITLE
  EPISODES_COUNT
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Episode implements Node {
  id: ID!
  episodeNumber: Int!
  animeSeason: Int!
  resolution: String
  videoCodec: String
  audioCodec: String
  item: Item!
  anime: Anime!
  releaseGroup: ReleaseGroup
}
"""A connection to a list of items."""
type EpisodeConnection {
  """A list of edges."""
  edges: [EpisodeEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type EpisodeEdge {
  """The item at the end of the edge."""
  node: Episode
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Episode connections"""
input EpisodeOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Episodes."""
  field: EpisodeOrderField!
}
"""Properties by which Episode connections can be ordered."""
enum EpisodeOrderField {
  EPISODE_NUMBER
  ANIME_SEASON
  RESOLUTION
  ITEM_PUBLISH_DATE
  ANIME_TITLE
}
type Item implements Node {
  id: ID!
  viewURL: String!
  downloadURL: String!
  fileName: String!
  fileSize: Int!
  publishDate: Time!
  episode: Episode
}
"""A connection to a list of items."""
type ItemConnection {
  """A list of edges."""
  edges: [ItemEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ItemEdge {
  """The item at the end of the edge."""
  node: Item
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for Item connections"""
input ItemOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Items."""
  field: ItemOrderField!
}
"""Properties by which Item connections can be ordered."""
enum ItemOrderField {
  FILE_NAME
  FILE_SIZE
  PUBLISH_DATE
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/eiri/konyanko/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  animes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Animes returned from the connection."""
    orderBy: AnimeOrder
  ): AnimeConnection!
  episodes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Episodes returned from the connection."""
    orderBy: [EpisodeOrder!]
  ): EpisodeConnection!
  items(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Items returned from the connection."""
    orderBy: [ItemOrder!]
  ): ItemConnection!
  releaseGroups: [ReleaseGroup!]!
}
type ReleaseGroup implements Node {
  id: ID!
  name: String!
  episodes: [Episode!]
}
"""The builtin Time type"""
scalar Time
